#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\options conference
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard

\end_layout

\begin_layout Standard
We term fault as any instance of hardware deviating from its expected behiour.
 Impact of such faults on the application can vary significantly depending
 on location of the fault.
 Based on impact of the faults, they can be classified into two braod categories
: hard fault and soft faults.
 A hard fault causes the application to abort for instance failing of nodes
 and network fall into these categories.
 On the other hand, soft faults may not cause application to abort.
 Nevertheless, a soft fault can potentially lead to an incorrect result,
 which we term as failure.
 Bitflips in memory and latches are example of softfaults.
 A more detailed explaination of types of faults can be found elsewhere
 [Hommen,heroux].
\end_layout

\begin_layout Standard
In this paper, we only deal with soft faults.
 A particularly insidious manifestation of soft-faults is silent data corruption.
 Silent data corruption occurs when a soft fault leads to corruption of
 entire intermidiate variables, without notifying the application.
 In such cases, application may arrive at an incorrect solution and yet,
 inform user as correct solution.
 Thus, silent data corruption can lead serous reliablity issues in the computing.
 
\end_layout

\begin_layout Standard
The importance of having algorithmic level fault tolerance has already been
 explored for a number of numerical computations[citation].
 Graph computations are equally susceptible to softfautls as numerical computati
on.
 Researchers have started looking at resilient discrete computation only
 recently [cite]
\end_layout

\end_body
\end_document
