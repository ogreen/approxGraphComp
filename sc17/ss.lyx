#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass IEEEtran
\options conference
\use_default_options false
\maintain_unincluded_children false
\language english
\language_package default
\inputencoding iso8859-15
\fontencoding T1
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize default
\use_geometry false
\use_package amsmath 2
\use_package amssymb 0
\use_package cancel 0
\use_package esint 1
\use_package mathdots 0
\use_package mathtools 0
\use_package mhchem 0
\use_package stackrel 0
\use_package stmaryrd 0
\use_package undertilde 0
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 0
\index Index
\shortcut idx
\color #008000
\end_index
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language english
\papercolumns 2
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

%describes general ss and SC algorithm
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard

\series bold
\emph on
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\series bold
\emph on
I
\series default
ntro to terminology
\emph default
 
\end_layout

\begin_layout Itemize
states of the algorithm 
\end_layout

\begin_layout Itemize
valid state and in valid state 
\end_layout

\begin_layout Itemize
effect of fault on valid state 
\end_layout

\end_inset


\end_layout

\begin_layout Standard
Formally, a system is said to be self-stabilizing, if starting from any
 arbitrary “state”, it comes to a valid state in a finite number of steps[dijkst
ra].
 An algorithm can also be viewed as a system with states and transitions.
 Its state is a subset of the intermediate variable which enables continued
 execution.
 A state of the algorithm is said to be in a valid state if the algorithm
 will converge to a correct solution in fault-free execution starting from
 this state, otherwise invalid.
 In previous work[], we have shown that such abstraction may help us to
 construct resilient algorithms.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\series bold
\emph on
Self-stabilization in Algorithmic resilience
\end_layout

\begin_layout Itemize
define 
\end_layout

\begin_layout Itemize
give examples 
\end_layout

\end_inset


\end_layout

\begin_layout Paragraph
Impact of hardware fault on algorithms state
\end_layout

\begin_layout Standard
If an algorithm is well suited for a given problem then in a fault-free
 execution, its state remains valid during entire computation.
 However, soft-fault such as bit flip can corrupt the intermediate variables
 and, can potentially bring it to an invalid state.
 Subsequent fault-free execution will lead to an incorrect solution, thus
 failure, unless it is brought to a valid state by some mechanism.
 Our principle for designing fault-tolerant algorithm is based on the idea
 of augmenting the algorithm so that it can bring itself to a valid state,
 by design.
 We distinguish between following two principles for bringing the algorithm
 to a valid state.
\end_layout

\begin_layout Paragraph
Self-correcting algorithm
\end_layout

\begin_layout Standard
A self-correcting algorithm can bring itself to a valid state by correcting
 its state with information of a previous valid state.
 In contrast to self-stabilization algorithm, a self-correcting must start
 from a valid state.
 In reality, it is not such a limitation as most algorithms by design starts
 from a valid state.
 On the other hand, the self-correcting algorithm can be more efficient
 than the self-stabilizing algorithm, as it can meaningfully exploit information
 of a previous valid state.
 In [cite], we presented a self-correcting of SYNC version of label propagation
 algorithm.
 
\end_layout

\begin_layout Standard
\begin_inset Note Comment
status collapsed

\begin_layout Plain Layout

\series bold
\emph on
s
\series default
elf-stabilizing algorithm
\emph default
 
\end_layout

\begin_layout Itemize
define 
\end_layout

\begin_layout Itemize
give examples 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
s
\series default
elf-correcting algorithm
\emph default
 
\end_layout

\begin_layout Itemize
define 
\end_layout

\begin_layout Itemize
give examples 
\end_layout

\begin_layout Plain Layout

\series bold
\emph on
A
\series default
 comparison between SS and SC
\emph default
 
\end_layout

\begin_layout Itemize
relation between SS and SC (SS is special case of SC) 
\end_layout

\begin_layout Itemize
advantage of SS over SC 
\end_layout

\end_inset


\end_layout

\end_body
\end_document
